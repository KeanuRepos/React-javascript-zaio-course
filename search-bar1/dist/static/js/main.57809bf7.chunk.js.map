{"version":3,"sources":["components/SearchText.js","components/LocationList.js","App.js","hoc/SearchSummary.js","serviceWorker.js","locations.js","index.js"],"names":["SearchText","event","val","target","value","console","log","this","props","filterUpdate","filterText","className","type","placeholder","aria-label","onChange","bind","Component","data","locationList","filter","location","toLowerCase","indexOf","map","SearchSummary","WrappedComponent","state","setState","LocationList","Boolean","window","hostname","match","split","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oNA0BeA,E,qLAtBEC,GACT,IAAMC,EAAMD,EAAME,OAAOC,MACzBC,QAAQC,IAAI,aAAaJ,GACzBK,KAAKC,MAAMC,aAAaP,K,+BAKxB,OADAG,QAAQC,IAAI,kBAAoBC,KAAKC,MAAME,YAEvC,yBAAKC,UAAU,YACX,2BACIA,UAAY,yBACZC,KAAO,OACPC,YAAc,SACdC,aAAa,SACbC,SAAUR,KAAKE,aAAaO,KAAKT,a,GAhB5BU,aCFV,cAAyB,IAAvBC,EAAsB,EAAtBA,KAAMR,EAAgB,EAAhBA,WAEnBL,QAAQC,IAAI,eAAeY,GAE3Bb,QAAQC,IAAI,iBAAiBI,GAC7B,IAAMS,EAAeD,EAChBE,QAAO,SAAAC,GACJ,OAAOA,EAASC,cAAcC,QAAQb,EAAWY,gBAAkB,KAEtEE,KAAI,SAAAH,GACD,OACI,wBAAIV,UAAU,mBAAmBU,MAI7C,OACI,yBAAKV,UAAU,aACX,wBAAIA,UAAY,cACXQ,KCYFM,EC7BO,SAACC,GACnB,OAAO,SAAClB,GAEJ,OADAH,QAAQC,IAAI,YAAYE,GAEpB,yBAAKG,UAAY,aAEb,yBAAKA,UAAY,YAEb,yBAAKA,UAAY,YACb,qCAGJ,yBAAKA,UAAY,SACb,yBAAKA,UAAY,iDAEjB,kBAACe,EAAqBlB,ODc/BiB,C,YAzBb,WAAYjB,GAAO,IAAD,8BAChB,4CAAMA,KACDmB,MAAQ,CACXjB,WAAW,IAHG,E,0EAMLR,GACXK,KAAKqB,SAAS,CACZlB,WAAWR,M,+BAQb,OAFAG,QAAQC,IAAI,cAAcC,KAAKC,MAAMa,UACrChB,QAAQC,IAAI,gBAAgBC,KAAKoB,MAAMjB,YAErC,yBAAKC,UAAY,OACf,kBAAC,EAAD,CAAYD,WAAcH,KAAKoB,MAAMjB,WAAYD,aAAcF,KAAKE,aAAaO,KAAKT,QACtF,kBAACsB,EAAD,CAAcX,KAAQX,KAAKC,MAAMa,SAAUX,WAAcH,KAAKoB,MAAMjB,kB,GApB1DO,cEOEa,QACW,cAA7BC,OAAOV,SAASW,UAEe,UAA7BD,OAAOV,SAASW,UAEhBD,OAAOV,SAASW,SAASC,MACvB,2DClBS,yIASJC,MAAM,MCHjBC,IAASC,OAAO,kBAAC,EAAD,CAAKf,SAAYA,IAAagB,SAASC,eAAe,SF6HhE,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.57809bf7.chunk.js","sourcesContent":["import React,{Component} from 'react'\r\n\r\n\r\nclass SearchText extends Component{\r\n    filterUpdate(event){\r\n        const val = event.target.value//problem area\r\n        console.log(\"searchText\",val)\r\n        this.props.filterUpdate(val)//calls a parent function and passes down value\r\n       \r\n    }\r\n    render(){\r\n        console.log('filterTextValue' , this.props.filterText);\r\n        return(\r\n            <div className=\"inputBox\">\r\n                <input \r\n                    className = \"form-control my-0 py-1\" \r\n                    type = \"text\" \r\n                    placeholder = \"Search\" \r\n                    aria-label = \"Search\"  \r\n                    onChange={this.filterUpdate.bind(this)}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchText","import React from 'react';\r\nexport default ({data, filterText}) => {\r\n    //data is supposed to show array\r\n    console.log(\"localistData\",data);\r\n    //filterText is supposed to input from user\r\n    console.log(\"localistFilter\",filterText); \r\n    const locationList = data\r\n        .filter(location => {      \r\n            return location.toLowerCase().indexOf(filterText.toLowerCase()) >= 0\r\n        })\r\n        .map(location =>{\r\n            return(\r\n                <li className=\"list-group-item\">{location}</li>\r\n            )\r\n    })\r\n    \r\n    return(\r\n        <div className=\"locations\">\r\n            <ul className = \"list-group\">\r\n                {locationList}\r\n            </ul>\r\n        </div>\r\n    );\r\n}","import React,{Component} from 'react';\nimport SearchText from './components/SearchText';\nimport LocationList from './components/LocationList';\nimport SearchSummary from './hoc/SearchSummary';\n\nclass App extends Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      filterText:''\n    }\n  }\n  filterUpdate(val){//value from child component\n    this.setState({\n      filterText:val\n    })\n    \n  }\n\n  render(){\n    console.log(\"Application\",this.props.location);\n    console.log(\"AppfilterText\",this.state.filterText);\n    return( \n      <div className = \"App\">\n        <SearchText filterText = {this.state.filterText} filterUpdate={this.filterUpdate.bind(this)}/*(method is passed down as prop)*//>\n        <LocationList data = {this.props.location} filterText = {this.state.filterText}/>\n      </div>\n    )\n}\n}\n\nexport default SearchSummary(App)\n","import React from 'react'\r\n\r\nconst SearchSummary = (WrappedComponent) => {\r\n    return (props) =>{\r\n        console.log('searchsum',props);\r\n        return(\r\n            <div className = \"container\">\r\n        \r\n                <div className = \"form-row\">\r\n        \r\n                    <div className = \"col mt-2\">\r\n                        <h3>Logo</h3> \r\n                    </div>\r\n        \r\n                    <div className = \"col-4\">\r\n                        <div className = \"input-group md-form form-sm form-1 pl-0 mt-2\">   \r\n                        </div>\r\n                        <WrappedComponent {...props}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            )\r\n    }\r\n\r\n}\r\nexport default SearchSummary","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export default `Durban,SA\r\nCape Town,SA\r\nPE,SA\r\nJohannesburg,SA\r\nPretoria,SA\r\nDelhi,India \r\nGujarat,India\r\nBig Ben,UK\r\nCalifornia,USA\r\nLondon,UK`.split('\\n');","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport location from \"./locations\"\nReactDOM.render(<App location = {location}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}